% IMPORTGENEACTIV
% Imports raw data from GeneActiv wearable accelerometers (Activinsights,
% Kimbolton, UK). It is not recommended to call this function directly, but
% rather use the function 'cic_newdataset'.
%
% Usage:
%   >> ACT = importgeneactiv(ACT, cfg);
%
% Inputs:
%   'ACT' - [struct] empty standardized ACT structure generated by
%           'cic_emptydataset'
%   'cfg' - [struct] configuration settings with the fields:
%           - 'FullFilePath' [char] full path to the BIN file
%
% Outputs: 
%   'ACT' - [struct] empty standardized ACT structure generated by
%           'cic_emptydataset'
%
% See also CIC_NEWDATASET, CIC_EMPTYDATASET.

% Authors:
%   German Gomez-Herrero, FindHotel, Amsterdam, The Netherlands
%   Dwayne L Mann, University of Queensland, Brisbane, Australia
%   Rick Wassing, Woolcock Institute of Medical Research, Sydney, Australia
%
% History: 
%   Created a long time ago, German Gomez-Herrero
%   Edited a while ago, Rick Wassing
%   Edited not too long ago, Dwayne L Mann
%   Edited 2023-03-17, Rick Wassing, removed dependency on 'parfor'

% Cicada (C) 2023 by Rick Wassing is licensed under 
% Attribution-NonCommercial-ShareAlike 4.0 International
% This license requires that reusers give credit to the creator. It allows
% reusers to distribute, remix, adapt, and build upon the material in any 
% medium or format, for noncommercial purposes only. If others modify or 
% adapt the material, they must license the modified material under 
% identical terms.

function ACT = importgeneactiv(ACT, cfg)
% ---------------------------------------------------------
% If this code runs in the app, we can update the progress dialog
app_progressdlg([], 'Message', sprintf('Importing ''%s.bin''', ACT.filename));
Colors = app_colors();
% ---------------------------------------------------------
% Read the header
fid = fopen(cfg.FullFilePath, 'r');
if fid == -1
    % file did not open, return empty dataset
    ACT = struct([]);
    return
else
    % ---------------------------------------------------------
    % Skip any blank line at the beginning of file
    C = textscan(fid, '%[^\n]',1);
    while isempty(C{1})
        C = textscan(fid, '%[^\n]', 1);
    end
    % ---------------------------------------------------------
    % Read header pages
    cnt = 1;
    Info = struct();
    Header = cell(7, 1);
    PageName = strtrim(C{1}{1});
    % ---------------------------------------------------------
    % As long as we have not arrived at the data sections, extract the header information
    while ~strcmpi(PageName, 'Recorded Data')
        % ---------------------------------------------------------
        % Current header fields
        C = textscan(fid, '%[^\r\n:*]: %[^\r\n]');
        % Convert to structure
        Header{cnt} = cell2struct(C{2}, strrep(C{1}(1:numel(C{2})), ' ', '_'), 1);
        Header{cnt}.Page_Name = PageName;
        % ---------------------------------------------------------
        switch PageName
            % ---------------------------------------------------------
            case 'Device Identity'
                ACT.info.modalities = {'accel', 'light', 'thermo'};
                ACT.info.devices(1).name = 'geneactiv';
                ACT.info.devices(1).serial = strtrim(Header{cnt}.Device_Unique_Serial_Code);
                % ---------------------------------------------------------
            case 'Device Capabilities'
                Info.accel.range = cellfun(@(str) str2double(str), strsplit(Header{cnt}.Accelerometer_Range, 'to'));
                Info.accel.resolution = str2double(Header{cnt}.Accelerometer_Resolution);
                Info.accel.unit = 'g';
                Info.light.range = cellfun(@(str) str2double(str), strsplit(Header{cnt}.Light_Meter_Range, 'to'));
                Info.light.resolution = str2double(Header{cnt}.Light_Meter_Resolution);
                Info.light.unit = 'lux';
                Info.thermo.range = cellfun(@(str) str2double(str), strsplit(Header{cnt}.Temperature_Sensor_Range, 'to'));
                Info.thermo.resolution = str2double(Header{cnt}.Temperature_Sensor_Resolution);
                Info.thermo.unit = 'Â°C';
            case 'Configuration Info'
                ACT.info.time_zone = strtrim(strrep(Header{cnt}.Time_Zone, 'GMT', ''));
                % ---------------------------------------------------------
            case 'Trial Info'
                ACT.info.institute = strtrim(Header{cnt}.Study_Centre);
                ACT.info.study = strtrim(Header{cnt}.Study_Code);
                ACT.info.researcher = strtrim(Header{cnt}.Investigator_ID);
                % ---------------------------------------------------------
            case 'Subject Info'
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ACT.info.participant_id = strtrim(Header{cnt}.Subject_Code);
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                location = strtrim(Header{cnt}.Device_Location_Code);
                switch lower(location)
                    case 'right wrist'
                        location = 'right wrist';
                    case 'left wrist'
                        location = 'left wrist';
                    case 'right ankle'
                        location = 'right ankle';
                    case 'left ankle'
                        location = 'left ankle';
                    case 'right upper arm'
                        location = 'right upper arm';
                    case 'left upper arm'
                        location = 'left upper arm';
                    case 'right upper leg'
                        location = 'right upper leg';
                    case 'left upper leg'
                        location = 'left upper leg';
                    case 'right hip'
                        location = 'right hip';
                    case 'left hip'
                        location = 'left hip';
                    case 'chest'
                        location = 'chest';
                    otherwise
                        location = 'missing';
                end
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ACT.info.sex = strtrim(Header{cnt}.Sex);
                switch lower(ACT.info.sex)
                    case {'male', 'm'}
                        ACT.info.sex = 'male';
                    case {'female', 'f'}
                        ACT.info.sex = 'female';
                    otherwise
                        ACT.info.sex = 'missing';
                end
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ACT.info.height = str2double(strtrim(Header{cnt}.Height));
                if isnan(ACT.info.height); ACT.info.height = zeros(0); end
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ACT.info.weight = str2double(strtrim(Header{cnt}.Weight));
                if isnan(ACT.info.weight); ACT.info.weight = zeros(0); end
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ACT.info.handedness = strtrim(Header{cnt}.Handedness_Code);
                switch lower(ACT.info.handedness)
                    case {'right', 'r'}
                        ACT.info.handedness = 'right';
                    case {'left', 'l'}
                        ACT.info.handedness = 'right';
                    otherwise
                        ACT.info.handedness = 'missing';
                end
                % - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                try
                    ACT.info.dob = datestr(datenum(strtrim(Header{cnt}.Date_of_Birth), 'yyyy-m-d'), 'yyyy-mm-dd'); %#ok<DATNM,DATST>
                catch
                    ACT.info.dob = '1900-01-01';
                end
                % ---------------------------------------------------------
            case 'Calibration Data'
                ACT.etc.cal.accel.geneactiv.x_gain = str2double(Header{cnt}.x_gain);
                ACT.etc.cal.accel.geneactiv.y_gain = str2double(Header{cnt}.y_gain);
                ACT.etc.cal.accel.geneactiv.z_gain = str2double(Header{cnt}.z_gain);
                ACT.etc.cal.accel.geneactiv.x_offset = str2double(Header{cnt}.x_offset);
                ACT.etc.cal.accel.geneactiv.y_offset = str2double(Header{cnt}.y_offset);
                ACT.etc.cal.accel.geneactiv.z_offset = str2double(Header{cnt}.z_offset);
                ACT.etc.cal.light.geneactiv.volts = str2double(Header{cnt}.Volts);
                ACT.etc.cal.light.geneactiv.lux =  str2double(Header{cnt}.Lux);
        end
        % ---------------------------------------------------------
        % Get the next page name
        if numel(C{2}) < numel(C{1})
            PageName = strtrim(C{1}{end});
            cnt = cnt + 1;
        else
            % We have reached the end of the file before arriving at the
            % data sections, return empty dataset
            ACT = struct([]);
            fclose(fid);
            return;
        end
    end
    Header(cnt+1:end) = []; %#ok<NASGU> 
end
fclose(fid); % Close the file for reading
% ---------------------------------------------------------
% read the main data
Data = regexp(fileread(cfg.FullFilePath), '\r\n|\r|\n', 'split');
% ---------------------------------------------------------
% Header is stored on rows 1-59, data is stored on 60-69, then 70-79 etc.
Data = Data(60:end);
if isempty(Data{end})
    Data(end)=[];
end
Data = cell2table(reshape(Data,10,[])');
% ---------------------------------------------------------
% wipe out cols without useful data
Data(:, [1:3, 5, 8, 9]) = [];
% ---------------------------------------------------------
% rename columns
Data.Properties.VariableNames = {'PageTime','PageTemp','PageVolts','PageData'};
% ---------------------------------------------------------
% remove redundant strings
Data{:, 1} = regexprep(Data{:, 1}, 'Page Time:', '');
Data{:, 2} = regexprep(Data{:, 2}, 'Temperature:', '');
Data{:, 3} = regexprep(Data{:, 3}, 'Battery voltage:', '');
% ---------------------------------------------------------
% convert from strings to data to use
Data.PageTime = datenum(Data.PageTime, 'yyyy-mm-dd HH:MM:SS:FFF'); %#ok<DATNM>
Data.PageTemp = str2double(Data.PageTemp);
Data.PageVolts = str2double(Data.PageVolts);
% ---------------------------------------------------------
% Extract number of pages and initialize number of samples per page
NumPages = size(Data,1);
NumSamples = nan(NumPages, 1);
% ---------------------------------------------------------
% Init data matrices
ACT.data = struct();
ACT.data(1).modality = 'accel';
ACT.data(2).modality = 'light';
ACT.data(1).device = 'geneactiv';
ACT.data(2).device = 'geneactiv';
ACT.data(1).label = 'accelerometer';
ACT.data(2).label = 'silicon photodiode';
ACT.data(1).loc = location;
ACT.data(2).loc = location;
ACT.data(1).unit = 'g';
ACT.data(2).unit = 'lux';
ACT.data(1).y = nan(300 .* NumPages, 3, 'single');
ACT.data(2).y = nan(300 .* NumPages, 1, 'single');
button = nan(300 .* NumPages, 1, 'single');
cancel = false;
% ---------------------------------------------------------
% Now get the raw accelerometry and light measurements
for i = 1:NumPages
    % Every percent increase, update the progress dialog
    if mod((i/NumPages), 0.01) == 0
        [~, cancel] = app_progressdlg([], ...
            'Cancelable', 'on', ...
            'Indeterminate', 'off', ...
            'Value', (i/NumPages), ...
            'Message', sprintf('Importing ''%s.bin'' (%.0f%%)', ACT.filename, (i/NumPages)*100));
    end
    % Check if cancel button is pressed
    if cancel
        ACT = struct([]);
        return
    end
    % Convert Hexadecimal values to XYZ and Light values
    [xyz_tmp, light_tmp, button_tmp] = hex2xyz(Data.PageData{i});
    NumSamples(i) = numel(light_tmp);
    idx = (i-1)*300+1:(i*300);
    ACT.data(1).y(idx, :) = xyz_tmp;
    ACT.data(2).y(idx) = light_tmp;
    button(idx) = button_tmp;
end % Done reading all data
% ---------------------------------------------------------
% Convert to single
ACT.data(1).y = single(ACT.data(1).y);
ACT.data(2).y = single(ACT.data(2).y);
% ---------------------------------------------------------
% Calculate sampling rate from data
SampRateOptions = [10, 20, 25, 30, 40, 50, 60, 66.7, 75, 85.7, 100, 500, 1000];
SampRate = mean(NumSamples./[NaN; diff(Data.PageTime*24*60*60)], 'omitnan');
[~, idxSampRate] = min(abs(SampRateOptions - SampRate));
ACT.data(1).srate = SampRateOptions(idxSampRate);
ACT.data(2).srate = SampRateOptions(idxSampRate);
% ---------------------------------------------------------
% Store the number of samples
ACT.data(1).pnts = size(ACT.data(1).y, 1);
ACT.data(2).pnts = size(ACT.data(2).y, 1);
% ---------------------------------------------------------
% Interpolate the time
Seconds = (300-1)/ACT.data(1).srate;
Milliseconds = round((Seconds-floor(Seconds))*1e3);
Seconds = floor(Seconds);
XMax = addtodate(addtodate(Data.PageTime(1), Seconds, 'second'), Milliseconds, 'millisecond'); %#ok<DATOD>
Offset = linspace(0, XMax-Data.PageTime(1), 300);
TimeInterp = repmat(Data.PageTime, 1, 300) + repmat(Offset, numel(Data.PageTime), 1);
TimeInterp = TimeInterp';
TimeInterp = TimeInterp(:);
% ---------------------------------------------------------
% Store x-min and x-max
ACT.xmin = datenum2iso(TimeInterp(1));
ACT.xmax = datenum2iso(TimeInterp(end));
ACT.data(1).xmin = ACT.xmin;
ACT.data(1).xmax = ACT.xmax;
ACT.data(2).xmin = ACT.xmin;
ACT.data(2).xmax = ACT.xmax;
ACT.data(1).resolution = Info.accel.resolution;
ACT.data(2).resolution = Info.light.resolution;
ACT.data(1).ymin = Info.accel.range(1);
ACT.data(1).ymax = Info.accel.range(2);
ACT.data(2).ymin = Info.light.range(1);
ACT.data(2).ymax = Info.light.range(2);
% ---------------------------------------------------------
% Check that all samples are accounted for
Times = gettimes(ACT.data(1));
MaxDiff = max(datetime(TimeInterp, 'ConvertFrom', 'datenum') - Times);
if seconds(MaxDiff) > ACT.epoch
    ACT.etc.warnings(end+1).message = sprintf('Geneactiv clock timestamps are out of sync with expected sampling rate by %.6f seconds.', seconds(MaxDiff));
end
% ---------------------------------------------------------
% Store the temperature data
ACT.data(3).modality = 'thermo';
ACT.data(3).device = 'geneactiv';
ACT.data(3).label = 'thermister';
ACT.data(3).loc = location;
ACT.data(3).unit = 'Â°C';
ACT.data(3).y = single(Data.PageTemp);
% And temperature time information
ACT.data(3).srate = SampRateOptions(idxSampRate)/300;
ACT.data(3).pnts = length(ACT.data(3).y);
ACT.data(3).xmin = datenum2iso(Data.PageTime(1));
ACT.data(3).xmax = datenum2iso(Data.PageTime(end));
ACT.data(3).resolution = Info.thermo.resolution;
ACT.data(3).ymin = Info.thermo.range(1);
ACT.data(3).ymax = Info.thermo.range(2);
% ---------------------------------------------------------
% Calibrate the data
% ---------------------------------------------------------
% Extract accelerometry offsets and gains for shortness
XOffset = repmat(ACT.etc.cal.accel.geneactiv.x_offset, ACT.data(1).pnts, 1);
YOffset = repmat(ACT.etc.cal.accel.geneactiv.y_offset, ACT.data(1).pnts, 1);
ZOffset = repmat(ACT.etc.cal.accel.geneactiv.z_offset, ACT.data(1).pnts, 1);
XGain = repmat(ACT.etc.cal.accel.geneactiv.x_gain, ACT.data(1).pnts, 1);
YGain = repmat(ACT.etc.cal.accel.geneactiv.y_gain, ACT.data(1).pnts, 1);
ZGain = repmat(ACT.etc.cal.accel.geneactiv.z_gain, ACT.data(1).pnts, 1);
% Apply transformation: CalValue = (RawValue - Offset) / Gain;
ACT.data(1).y = (ACT.data(1).y .* 100 - [XOffset, YOffset, ZOffset]) ./ [XGain, YGain, ZGain];
% ---------------------------------------------------------
% Calibrate the light data
ACT.data(2).y = floor(ACT.data(2).y .* ACT.etc.cal.light.geneactiv.lux ./ ACT.etc.cal.light.geneactiv.volts);
% ---------------------------------------------------------
% Extract difference values from button presses
button = diff([0; button > 0.5]) == 1;
% Convert button detection events to the event table
if any(button)
    times = gettimes(ACT.data(1));
    t = table();
    t.id = (1:length(find(button)))';
    t.onset = cellstr(datetime2iso(times(button)));
    t.duration = zeros(length(find(button)), 1);
    t.label = repmat({'button'}, length(find(button)), 1);
    t.type = repmat({'button'}, length(find(button)), 1);
    t.color = repmat({Colors.cic_red}, length(find(button)), 1);
    t.show = true(length(find(button)), 1);
    ACT.analysis.events = [ACT.analysis.events; t];
end
% ---------------------------------------------------------
end